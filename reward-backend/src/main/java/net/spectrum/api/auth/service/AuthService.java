package net.spectrum.api.auth.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import net.spectrum.api.auth.login.dto.LoginDto;
import net.spectrum.api.auth.session.dto.SessionRequestDto;
import net.spectrum.api.util.ExceptionHandlerUtil;

import static net.spectrum.api.util.constants.Messages.TIME_OUT;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;


@Service
public class AuthService {
    @Autowired
    private RestTemplate restTemplate;

    @Value("${auth.server.baseUrl}")
    private String authServerUrl;

    @Value("${auth.server.session}")
    private String session;

    @Value("${auth.server.logout}")
    private String logout;

    @Value("${auth.server.user.info}")
    private String userInfo;

/**
 * A function that calls the auth server to get the list of sessions.
 * 
 * @param token The token that was generated by the authentication server.
 * @param offset The offset of the first record to return.
 * @param limit The number of records to be returned.
 * @param searchText The text to search for in the session list.
 * @return A list of sessions
 */
    @HystrixCommand(commandKey = "authTimeOut", fallbackMethod = "sessionListFallBack")
    public ResponseEntity<JsonNode> getSession(String token, int offset, int limit, String searchText) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization",  token);
        ResponseEntity<JsonNode> response = restTemplate.exchange(
                authServerUrl + session + "?offset="+offset+"&limit="+limit+"&searchText="+searchText,
                HttpMethod.GET,
                new HttpEntity<>(headers),
                JsonNode.class
        );
        return response;
    }

/**
 * It calls the Auth Server's session endpoint with a PUT request, passing the token and the request
 * body
 * 
 * @param token The token that was generated by the auth server.
 * @param request The request object that will be sent to the auth server.
 * @return ResponseEntity<JsonNode>
 */
    @HystrixCommand(commandKey = "authTimeOut", fallbackMethod = "sessionTerminateFallBack")
    public ResponseEntity<JsonNode> terminateSession(String token, SessionRequestDto request) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", token);
        ResponseEntity<JsonNode> response = restTemplate.exchange(
                authServerUrl + session,
                HttpMethod.PUT,
                new HttpEntity<>(request, headers),
                JsonNode.class
        );
        return response;
    }

/**
 * It calls the logout endpoint of the auth server.
 * 
 * @param token The token that needs to be invalidated.
 * @return ResponseEntity<JsonNode>
 */
    @HystrixCommand(commandKey = "authTimeOut", fallbackMethod = "logoutFallBack")
    public ResponseEntity<JsonNode> logoutSession(String token) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", token);
        ResponseEntity<JsonNode> response = restTemplate.exchange(
                authServerUrl + logout,
                HttpMethod.PUT,
                new HttpEntity<>(headers),
                JsonNode.class
        );
        return response;
    }

//    @HystrixCommand(commandKey = "authTimeOut", fallbackMethod = "userInfoFallBack")
/**
 * It makes a GET request to the auth server's userInfo endpoint, passing the token in the
 * Authorization header
 * 
 * @param token The token that was returned from the login request.
 * @return UserDto
 */
    public ResponseEntity<LoginDto> getUserDto(String token) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", token);
        ResponseEntity<LoginDto> userDto = restTemplate.exchange(
                authServerUrl + userInfo,
                HttpMethod.GET,
                new HttpEntity<>(headers),
                LoginDto.class
        );
        return userDto;
    }

    ResponseEntity<LoginDto> userInfoFallBack(String token) throws ExceptionHandlerUtil {
        throw new ExceptionHandlerUtil(HttpStatus.REQUEST_TIMEOUT, TIME_OUT);
    }

    ResponseEntity<JsonNode> sessionListFallBack(String token, int offset, int limit, String searchText) throws ExceptionHandlerUtil {
        throw new ExceptionHandlerUtil(HttpStatus.REQUEST_TIMEOUT, TIME_OUT);
    }

    ResponseEntity<JsonNode> sessionTerminateFallBack(String token, SessionRequestDto request) throws ExceptionHandlerUtil {
        throw new ExceptionHandlerUtil(HttpStatus.REQUEST_TIMEOUT, TIME_OUT);
    }

    ResponseEntity<JsonNode> logoutFallBack(String token) throws ExceptionHandlerUtil {
        throw new ExceptionHandlerUtil(HttpStatus.REQUEST_TIMEOUT, TIME_OUT);
    }
}
