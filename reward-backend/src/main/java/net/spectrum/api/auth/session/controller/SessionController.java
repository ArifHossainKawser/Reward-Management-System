package net.spectrum.api.auth.session.controller;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import lombok.extern.slf4j.Slf4j;
import net.spectrum.api.auth.session.dto.SessionRequestDto;
import net.spectrum.api.auth.session.service.SessionService;
import net.spectrum.api.util.ExceptionHandlerUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Pattern;
import java.security.Principal;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/${api.version}/user/sessions")
@Validated
public class SessionController extends RuntimeException {

    @Autowired
    SessionService sessionService;

/**
 * This function is used to get the list of sessions
 * 
 * @param principal This is the user who is making the request.
 * @param offset The offset from where the data should be fetched.
 * @param limit The number of records to be returned.
 * @param searchText This is the text that you want to search for in the session list.
 * @param token The token that was generated by the authentication service.
 * @param requestId A unique ID for the request.
 * @param requestTimeoutInSeconds This is the timeout for the request. If the request is not processed
 * within the timeout, the request will be rejected.
 * @param requestTime The time when the request was received by the service.
 * @return ResponseEntity<Map<String, Object>>
 */
    @GetMapping()
    @ApiImplicitParams({@ApiImplicitParam(name = "Authorization", value = "Bearer token", required = true, dataType = "string", paramType = "header")})
    public ResponseEntity<Map<String, Object>> getSession(
            Principal principal,
            @RequestParam(name = "offset", defaultValue = "0") int offset,
            @RequestParam(name = "limit", defaultValue = "10") int limit,
            @RequestParam(name = "searchText", defaultValue = "") String searchText,
            @RequestHeader(name="Authorization") String token,
            @RequestHeader(name="Request-Id", required= true) @NotEmpty String requestId,
            @RequestHeader(name="Request-Timeout-In-Seconds", required= true) @NotEmpty String requestTimeoutInSeconds,
            @RequestHeader(name="Request-Time", required= true) @NotEmpty @Pattern(regexp = "(19|20)[0-9][0-9]-(0[0-9]|1[0-2])-(0[1-9]|([12][0-9]|3[01]))T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].([0-9]{3,6})Z", message = "must match yyyy-MM-ddTHH:mm:ss.SSSSSSZ") String requestTime)
    {
        try{
            log.info("Request received for session list by: {}", principal.getName());
            ResponseEntity<Map<String, Object>> response = sessionService.getSession(token , offset, limit , searchText.toLowerCase());
            log.info("Response send for session list: {}", response);
            return response;
        } catch (ExceptionHandlerUtil ex){
            log.error(ex.getMessage(), ex);
            throw new ResponseStatusException(ex.getCode(), ex.getMessage(), ex);
        }
    }

/**
 * This function is used to terminate a session
 * 
 * @param principal This is the user principal object that contains the user's information.
 * @param request The request body.
 * @param token The token that was generated by the authentication service.
 * @param requestId A unique identifier for the request.
 * @param requestTimeoutInSeconds The timeout for the request in seconds.
 * @param requestTime The time the request was received by the service.
 * @return ResponseEntity<Map<String, Object>>
 */
    @PutMapping()
    @ApiImplicitParams({@ApiImplicitParam(name = "Authorization", value = "Bearer token", required = true, dataType = "string", paramType = "header")})
    public ResponseEntity<Map<String, Object>> terminateSession(
            Principal principal,
            @Valid @RequestBody SessionRequestDto request,
            @RequestHeader(name="Authorization") String token,
            @RequestHeader(name="Request-Id", required= true) @NotEmpty String requestId,
            @RequestHeader(name="Request-Timeout-In-Seconds", required= true) @NotEmpty String requestTimeoutInSeconds,
            @RequestHeader(name="Request-Time", required= true) @NotEmpty @Pattern(regexp = "(19|20)[0-9][0-9]-(0[0-9]|1[0-2])-(0[1-9]|([12][0-9]|3[01]))T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].([0-9]{3,6})Z", message = "must match yyyy-MM-ddTHH:mm:ss.SSSSSSZ") String requestTime)
    {
        try{
            log.info("Request received for terminate session list by for: {}", principal.getName(), request.getOids());
            ResponseEntity<Map<String, Object>> response = sessionService.updateSession(token, request);
            log.info("Response send for terminate session list: {}", response);
            return response;
        } catch (ExceptionHandlerUtil ex){
            log.error(ex.getMessage(), ex);
            throw new ResponseStatusException(ex.getCode(), ex.getMessage(), ex);
        }
    }

/**
 * It logs out the user from the system
 * 
 * @param principal This is the user principal object that is passed by Spring Security.
 * @param token The token that was generated when the user logged in.
 * @param requestId A unique identifier for the request.
 * @param requestTimeoutInSeconds This is the timeout for the request. If the request is not processed
 * within this time, the request will be timed out.
 * @param requestTime The time at which the request was received by the service.
 * @return ResponseEntity<Map<String, Object>>
 */
    @PutMapping("/logout")
    @ApiImplicitParams({@ApiImplicitParam(name = "Authorization", value = "Bearer token", required = true, dataType = "string", paramType = "header")})
    public ResponseEntity<Map<String, Object>> logoutSession(
            Principal principal,
            @RequestHeader(name="Authorization") String token,
            @RequestHeader(name="Request-Id", required= true) @NotEmpty String requestId,
            @RequestHeader(name="Request-Timeout-In-Seconds", required= true) @NotEmpty String requestTimeoutInSeconds,
            @RequestHeader(name="Request-Time", required= true) @NotEmpty @Pattern(regexp = "(19|20)[0-9][0-9]-(0[0-9]|1[0-2])-(0[1-9]|([12][0-9]|3[01]))T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].([0-9]{3,6})Z", message = "must match yyyy-MM-ddTHH:mm:ss.SSSSSSZ") String requestTime)
    {
        try{
            log.info("Request received for logout of : {}", principal.getName());
            ResponseEntity<Map<String, Object>> response = sessionService.logoutSession(token);
            log.info("Response send for logout : {}", response);
            return response;
        } catch (ExceptionHandlerUtil ex){
            log.error(ex.getMessage(), ex);
            throw new ResponseStatusException(ex.getCode(), ex.getMessage(), ex);
        }
    }
}
