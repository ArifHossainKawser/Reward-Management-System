package net.spectrum.api.auth.session.service;

import com.fasterxml.jackson.databind.JsonNode;
import lombok.extern.slf4j.Slf4j;
import net.spectrum.api.auth.service.AuthService;
import net.spectrum.api.auth.session.dto.SessionRequestDto;
import net.spectrum.api.util.ExceptionHandlerUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import static net.spectrum.api.util.constants.Messages.SESSION_LIST_NOT_FOUND;

import java.util.HashMap;
import java.util.Map;

@Service
@Slf4j
public class SessionService {

    @Autowired
    AuthService authServiceClient;

/**
 * It sends a request to the auth service client to get the session list
 * 
 * @param token The token that was generated by the auth service.
 * @param offset The offset of the first record to return.
 * @param limit The number of records to be returned.
 * @param searchText The text to search for in the session list.
 * @return A map of the session list, the count of the session list, and the user message.
 */
    public ResponseEntity<Map<String, Object>> getSession(String token, int offset, int limit, String searchText) throws ExceptionHandlerUtil {
        log.info("sending auth service client request for session list");
        ResponseEntity<JsonNode> sessionResponse =  authServiceClient.getSession(token, offset, limit, searchText);
        if (sessionResponse.getBody().get("data").size() == 0)
            throw new ExceptionHandlerUtil(HttpStatus.NOT_FOUND, SESSION_LIST_NOT_FOUND);
        Map<String, Object> methodResponse = new HashMap<>();
        methodResponse.put("userMessage", sessionResponse.getBody().get("userMessage"));
        methodResponse.put("data", sessionResponse.getBody().get("data"));
        methodResponse.put("count", sessionResponse.getBody().get("count"));
        return new ResponseEntity<Map<String, Object>>(methodResponse, HttpStatus.OK);
    }

/**
 * It sends a request to the auth service to terminate the session and returns the response to the user
 * 
 * @param token The token that was generated by the auth service.
 * @param request The request object that will be sent to the auth service.
 * @return A map with a single key-value pair. The key is "userMessage" and the value is the
 * userMessage from the auth service client response.
 */
    public ResponseEntity<Map<String, Object>> updateSession(String token, SessionRequestDto request) throws ExceptionHandlerUtil {
        log.info("sending auth service client request for session termination");
        ResponseEntity<JsonNode> sessionResponse =  authServiceClient.terminateSession(token, request);
        Map<String, Object> methodResponse = new HashMap<>();
        methodResponse.put("userMessage", sessionResponse.getBody().get("userMessage"));
        return new ResponseEntity<Map<String, Object>>(methodResponse, HttpStatus.OK);
    }

/**
 * It sends a request to the auth service client to logout the session and returns the response to the
 * user
 * 
 * @param token The token that was generated when the user logged in.
 * @return A ResponseEntity object is being returned.
 */
    public ResponseEntity<Map<String, Object>> logoutSession(String token) throws ExceptionHandlerUtil {
        log.info("sending auth service client request for session logout");
        ResponseEntity<JsonNode> sessionResponse =  authServiceClient.logoutSession(token);
        Map<String, Object> methodResponse = new HashMap<>();
        methodResponse.put("userMessage", sessionResponse.getBody().get("userMessage"));
        return new ResponseEntity<Map<String, Object>>(methodResponse, HttpStatus.OK);
    }

}
