package net.spectrum.api.auth.login.service;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import lombok.extern.slf4j.Slf4j;
import net.spectrum.api.auth.service.AuthService;
import net.spectrum.api.auth.login.dto.LoginDto;
import net.spectrum.api.auth.login.entity.LoginEntity;
import net.spectrum.api.auth.login.repository.LoginRepository;
import net.spectrum.api.auth.login.util.Password;
import net.spectrum.api.util.ExceptionHandlerUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import static net.spectrum.api.util.constants.Messages.*;

import java.util.HashMap;
import java.util.Map;

@Service
@Slf4j
public class LoginService {

    @Autowired
    LoginRepository loginRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    AuthService authServiceClient;

/**
 * It sends a request to the auth service client to get the user info and returns the response
 * 
 * @param token The token that was generated by the auth service.
 * @return ResponseEntity<UserDto>
 */
    public ResponseEntity<LoginDto> getUserByAuthToken(String token) throws ExceptionHandlerUtil {
        log.info("Sending auth service client request for user info");
        ResponseEntity<LoginDto> userDto;
        try {
            userDto =  authServiceClient.getUserDto(token);
        }catch (Exception e){
            throw  new ExceptionHandlerUtil(HttpStatus.FORBIDDEN, e.getMessage());
        }
        log.info("Received auth service client request for user info");
        return new ResponseEntity<>(userDto.getBody(), HttpStatus.OK);
    }

/**
 * It takes in a request object and a userId, checks if the user exists, if the old password matches,
 * and then sets the new password
 * 
 * @param requestedPssword The request object that contains the old and new password.
 * @param userId The userId of the user whose password is to be changed.
 * @return A ResponseEntity object is being returned.
 */
    public ResponseEntity<Map<String,Object>> setPassword(Password requestedPssword, String userId) throws ExceptionHandlerUtil{
        LoginEntity loginEntity = loginRepository.findByUserId(userId);
        if(loginEntity == null){
            throw new ExceptionHandlerUtil(HttpStatus.NOT_FOUND, USER_NOT_FOUND);
        }

        if (!passwordEncoder.matches(requestedPssword.getOldPassword(), loginEntity.getPassword())){
            throw new ExceptionHandlerUtil(HttpStatus.NOT_ACCEPTABLE, OLD_PASSWORD_DOES_NOT_MATCH);
        }

        String hashedPassword = passwordEncoder.encode(requestedPssword.getNewPassword());
        loginEntity.setPassword(hashedPassword);
        loginEntity.setResetRequired("No");
        loginRepository.save(loginEntity);
        Map<String, Object> response = new HashMap<>();
        response.put("userMessage",PASSWORD_CHANGED_SUCCESSFULLY);
        return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
    }

    public ResponseEntity<Map<String, Object>> resetPassword(String userId, Password requestedPassowrd)
        throws ExceptionHandlerUtil {
        LoginEntity loginEntity = loginRepository.findByUserId(userId);
        if (loginEntity == null) {
            throw new ExceptionHandlerUtil(HttpStatus.NOT_FOUND, USER_NOT_FOUND);
        }
        if (!passwordEncoder.matches(requestedPassowrd.getOldPassword(), loginEntity.getPassword())) {
            throw new ExceptionHandlerUtil(HttpStatus.NOT_ACCEPTABLE, OLD_PASSWORD_DOES_NOT_MATCH);
        }else{
            String hashedPassword = passwordEncoder.encode(requestedPassowrd.getNewPassword());
            loginEntity.setPassword(hashedPassword);
            loginEntity.setEditedOn(Timestamp.valueOf(LocalDateTime.now()));
            loginEntity.setResetRequired("No");
            loginRepository.save(loginEntity);
        }
        Map<String, Object> response = new HashMap<>();
        response.put("userMessage", PASSWORD_CHANGED_SUCCESSFULLY);
        return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
    }
}
