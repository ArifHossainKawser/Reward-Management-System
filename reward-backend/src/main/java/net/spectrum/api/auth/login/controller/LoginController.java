package net.spectrum.api.auth.login.controller;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import lombok.extern.slf4j.Slf4j;
import net.spectrum.api.auth.login.dto.LoginDto;
import net.spectrum.api.auth.login.entity.LoginEntity;
import net.spectrum.api.auth.login.repository.LoginRepository;
import net.spectrum.api.auth.login.service.LoginService;
import net.spectrum.api.auth.login.util.Password;
import net.spectrum.api.util.ExceptionHandlerUtil;
import net.spectrum.api.util.constants.ValidationPattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Pattern;
import java.security.Principal;
import java.util.List;
import java.util.Map;

@RestController
@Slf4j
@RequestMapping("/v1/user")
public class LoginController extends RuntimeException {

    @Autowired
    private LoginService userService;

    @Autowired
    private LoginRepository loginRepository;

/**
 * This function is used to get user information by auth token
 * 
 * @param token The token that was generated by the authentication service.
 * @param requestId A unique ID for the request.
 * @param requestTimeoutInSeconds The timeout value for the request.
 * @param principal This is the user object that is populated by Spring Security.
 * @param requestTime The time the request was received by the service.
 * @return ResponseEntity<UserDto>
 */
    @GetMapping()
    @ApiImplicitParams({@ApiImplicitParam(name = "Authorization", value = "Bearer token", required = true, dataType = "string", paramType = "header")})
    public ResponseEntity<LoginDto> getUserDto(
            @RequestHeader(name = "Authorization") String token,
            @RequestHeader(name = "Request-Id", required = true) @NotEmpty String requestId,
            @RequestHeader(name = "Request-Timeout-In-Seconds", required = true) @NotEmpty String requestTimeoutInSeconds,
            @AuthenticationPrincipal Principal principal,
            @RequestHeader(name = "Request-Time", required = true) @NotEmpty @Pattern(regexp = ValidationPattern.requestTimePattern, message = "must match yyyy-MM-ddTHH:mm:ss.SSSSSSZ") String requestTime )
            throws Exception {
        try {
            log.info("Get user info by auth token received for userid : {}", principal.getName());
            ResponseEntity<LoginDto> response = userService.getUserByAuthToken(token);
            log.info("Successfully get user information : {}", response);
            return response;
        } catch (ExceptionHandlerUtil ex) {
            log.error(ex.getMessage(), ex);
            throw new ResponseStatusException(ex.getCode(), ex.getMessage(), ex);
        }
    }

/**
 * This function is used to change the password of the user
 * 
 * @param request The request body
 * @param token The token that was generated by the authentication service.
 * @param requestId A unique identifier for the request.
 * @param requestTimeoutInSeconds This is the timeout for the request.
 * @param requestTime The time when the request was received by the service.
 * @param principal This is the principal object that is created by Spring Security. It contains the
 * username of the user who is making the request.
 * @return ResponseEntity<Map<String, Object>>
 */
    @PutMapping(path = "/password")
    public ResponseEntity<Map<String, Object>> setPassword(
            @Valid @RequestBody Password request,
            @RequestHeader(name="Authorization") String token,
            @RequestHeader(name="Request-Id", required= true) @NotEmpty String requestId,
            @RequestHeader(name="Request-Timeout-In-Seconds", required= true) @NotEmpty String requestTimeoutInSeconds,
            @RequestHeader(name="Request-Time", required= true) @NotEmpty @Pattern(regexp = ValidationPattern.requestTimePattern, message = "must match yyyy-MM-ddTHH:mm:ss.SSSSSSZ") String requestTime,
            @AuthenticationPrincipal Principal principal
    ) throws Exception {
        try{
            log.info("Request received for password change: {}",request);
            ResponseEntity<Map<String,Object>> response = userService.setPassword(request, principal.getName());
            log.info("Response send for password change: {}" ,response);
            return response;
        } catch (ExceptionHandlerUtil ex){
            log.error(ex.getMessage(), ex);
            throw new ResponseStatusException(ex.getCode(), ex.message, ex);
        }
    }

    @PutMapping(path = "/reset-password")
    public ResponseEntity<Map<String, Object>> resetPassword(
        @Valid @RequestBody Password requestedPassowrd,
        @RequestHeader(name="Authorization") String token,
        @RequestHeader(name="Request-Id", required= true) @NotEmpty String requestId,
        @RequestHeader(name="Request-Timeout-In-Seconds", required= true) @NotEmpty String requestTimeoutInSeconds,
        @RequestHeader(name="Request-Time", required= true) @NotEmpty @Pattern(regexp = ValidationPattern.requestTimePattern, message = "must match yyyy-MM-ddTHH:mm:ss.SSSSSSZ") String requestTime,
        @AuthenticationPrincipal Principal principal
    ) throws Exception {
        try{
            log.info("Request received for password change: {}",requestedPassowrd);
            ResponseEntity<Map<String,Object>> response = userService.resetPassword(principal.getName(), requestedPassowrd);
            log.info("Response send for password change: {}" ,response);
            return response;
        } catch (ExceptionHandlerUtil ex){
            log.error(ex.getMessage(), ex);
            throw new ResponseStatusException(ex.getCode(), ex.message, ex);
        }
    }

    @GetMapping("AllLogin")
    public ResponseEntity<List<LoginEntity>> loginData(
            @RequestHeader(name = "Authorization") String token,
            @RequestHeader(name = "Request-Id", required = true) @NotEmpty String requestId,
            @RequestHeader(name = "Request-Timeout-In-Seconds", required = true) @NotEmpty String requestTimeoutInSeconds,
            @AuthenticationPrincipal Principal principal,
            @RequestHeader(name = "Request-Time", required = true) @NotEmpty @Pattern(regexp = ValidationPattern.requestTimePattern, message = "must match yyyy-MM-ddTHH:mm:ss.SSSSSSZ") String requestTime )
            throws Exception {
        log.info("Get user info by auth token received for userid : {}", principal.getName());
        List<LoginEntity> response = loginRepository.findAll();
        log.info("Successfully get user information : {}", response);
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

}
